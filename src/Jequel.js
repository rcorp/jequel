var _util = {
    getValueBetweenSqBrackets: function (v) { return v.split('[')[1].split(']')[0]; },
    hasSqBracket: function (v) { return ((v.indexOf('[') != -1) && (v.indexOf(']') != -1)); },
    curry: function (func) {
        var initial_args = [].slice.apply(arguments, [1]);
        var func_args_length = func.length;
        function curried(args) {
            if (args.length >= func_args_length) {
                return func.apply(null, args);
            }
            return function () {
                return curried(args.concat([].slice.apply(arguments)));
            };
        }
        return curried(initial_args);
    }
};
module.exports = (function () {
    function Jequel() {
        this._functions = [];
        this.from = {};
        this.select = {};
    }
    Jequel.prototype.query = function (_a) {
        var _this = this;
        var select = _a.select, from = _a.from, where = _a.where;
        this.select = select;
        this.from = from;
        this.where = where;
        var selectResults = this.selected = this.bfs(this.select, this.from);
        if (this.where)
            return selectResults.filter(function (selectResult) {
                return _this.where.every(function (where) {
                    return _this.bfs(where.path, selectResult).some(function (val) {
                        console.log('val', val);
                        return (val == where.value);
                    });
                });
            });
        else
            return selectResults;
    };
    Jequel.prototype.bfs = function (path, obj) {
        var _this = this;
        obj = [obj];
        path.split('.').map(function (key) { return obj = _this.traverse(key, obj); });
        return obj;
    };
    Jequel.prototype.traverse = function (key, obj) {
        var _this = this;
        var data = [];
        obj.forEach(function (x) {
            if (x instanceof Array)
                if (key == '*')
                    data = data.concat(x);
                else
                    data.push(x[key]);
            else if (typeof x == 'object')
                if (key == '*')
                    data = data.concat(_this._getValues(x));
                else
                    data.push(x[key]);
        });
        return data;
    };
    Jequel.prototype._getValues = function (myObject) {
        return Object.keys(myObject).map(function (key) {
            return myObject[key];
        });
    };
    return Jequel;
})();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSmVxdWVsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiSmVxdWVsLnRzIl0sIm5hbWVzIjpbImN1cnJpZWQiLCJjb25zdHJ1Y3RvciIsInF1ZXJ5IiwiYmZzIiwidHJhdmVyc2UiLCJfZ2V0VmFsdWVzIl0sIm1hcHBpbmdzIjoiQUFBQSxJQUFJLEtBQUssR0FBRztJQUNSLHlCQUF5QixFQUFFLFVBQVUsQ0FBQyxJQUFJLE1BQU0sQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQSxDQUFDLENBQUM7SUFDaEYsWUFBWSxFQUFFLFVBQVUsQ0FBQyxJQUFHLE1BQU0sQ0FBQyxDQUFFLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFLLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFFLENBQUEsQ0FBQSxDQUFDO0lBRXpGLEtBQUssRUFBRSxVQUFTLElBQUk7UUFDaEIsSUFBSSxZQUFZLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNsRCxJQUFJLGdCQUFnQixHQUFHLElBQUksQ0FBQyxNQUFNLENBQUM7UUFFbkMsaUJBQWlCLElBQUk7WUFDakJBLEVBQUVBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLE1BQU1BLElBQUlBLGdCQUFnQkEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7Z0JBQ2xDQSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxLQUFLQSxDQUFDQSxJQUFJQSxFQUFFQSxJQUFJQSxDQUFDQSxDQUFDQTtZQUNsQ0EsQ0FBQ0E7WUFFREEsTUFBTUEsQ0FBQ0E7Z0JBQ0gsTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEVB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